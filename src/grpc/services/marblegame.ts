/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: src/grpc/proto/marblegame.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace marblegame {
    export class ProtoPlayer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            name?: string;
            team?: boolean;
            champ?: number;
            ready?: boolean;
            userClass?: number;
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("team" in data && data.team != undefined) {
                    this.team = data.team;
                }
                if ("champ" in data && data.champ != undefined) {
                    this.champ = data.champ;
                }
                if ("ready" in data && data.ready != undefined) {
                    this.ready = data.ready;
                }
                if ("userClass" in data && data.userClass != undefined) {
                    this.userClass = data.userClass;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get team() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set team(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get champ() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set champ(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ready() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set ready(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get userClass() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set userClass(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            type?: string;
            name?: string;
            team?: boolean;
            champ?: number;
            ready?: boolean;
            userClass?: number;
            data?: string;
        }): ProtoPlayer {
            const message = new ProtoPlayer({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.team != null) {
                message.team = data.team;
            }
            if (data.champ != null) {
                message.champ = data.champ;
            }
            if (data.ready != null) {
                message.ready = data.ready;
            }
            if (data.userClass != null) {
                message.userClass = data.userClass;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                name?: string;
                team?: boolean;
                champ?: number;
                ready?: boolean;
                userClass?: number;
                data?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.team != null) {
                data.team = this.team;
            }
            if (this.champ != null) {
                data.champ = this.champ;
            }
            if (this.ready != null) {
                data.ready = this.ready;
            }
            if (this.userClass != null) {
                data.userClass = this.userClass;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.team != false)
                writer.writeBool(3, this.team);
            if (this.champ != 0)
                writer.writeInt32(4, this.champ);
            if (this.ready != false)
                writer.writeBool(5, this.ready);
            if (this.userClass != 0)
                writer.writeInt32(6, this.userClass);
            if (this.data.length)
                writer.writeString(7, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoPlayer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.team = reader.readBool();
                        break;
                    case 4:
                        message.champ = reader.readInt32();
                        break;
                    case 5:
                        message.ready = reader.readBool();
                        break;
                    case 6:
                        message.userClass = reader.readInt32();
                        break;
                    case 7:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoPlayer {
            return ProtoPlayer.deserialize(bytes);
        }
    }
    export class Item extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code?: number;
            locked?: boolean;
            selected?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("locked" in data && data.locked != undefined) {
                    this.locked = data.locked;
                }
                if ("selected" in data && data.selected != undefined) {
                    this.selected = data.selected;
                }
            }
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get locked() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set locked(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get selected() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set selected(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            code?: number;
            locked?: boolean;
            selected?: boolean;
        }): Item {
            const message = new Item({});
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.locked != null) {
                message.locked = data.locked;
            }
            if (data.selected != null) {
                message.selected = data.selected;
            }
            return message;
        }
        toObject() {
            const data: {
                code?: number;
                locked?: boolean;
                selected?: boolean;
            } = {};
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.locked != null) {
                data.locked = this.locked;
            }
            if (this.selected != null) {
                data.selected = this.selected;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code != 0)
                writer.writeInt32(1, this.code);
            if (this.locked != false)
                writer.writeBool(2, this.locked);
            if (this.selected != false)
                writer.writeBool(3, this.selected);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Item {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Item();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code = reader.readInt32();
                        break;
                    case 2:
                        message.locked = reader.readBool();
                        break;
                    case 3:
                        message.selected = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Item {
            return Item.deserialize(bytes);
        }
    }
    export class ItemSetting extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items?: Item[];
            randomCount?: number;
            poolJson?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
                if ("randomCount" in data && data.randomCount != undefined) {
                    this.randomCount = data.randomCount;
                }
                if ("poolJson" in data && data.poolJson != undefined) {
                    this.poolJson = data.poolJson;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, Item, 1) as Item[];
        }
        set items(value: Item[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get randomCount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set randomCount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get poolJson() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set poolJson(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            items?: ReturnType<typeof Item.prototype.toObject>[];
            randomCount?: number;
            poolJson?: string;
        }): ItemSetting {
            const message = new ItemSetting({});
            if (data.items != null) {
                message.items = data.items.map(item => Item.fromObject(item));
            }
            if (data.randomCount != null) {
                message.randomCount = data.randomCount;
            }
            if (data.poolJson != null) {
                message.poolJson = data.poolJson;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof Item.prototype.toObject>[];
                randomCount?: number;
                poolJson?: string;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: Item) => item.toObject());
            }
            if (this.randomCount != null) {
                data.randomCount = this.randomCount;
            }
            if (this.poolJson != null) {
                data.poolJson = this.poolJson;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: Item) => item.serialize(writer));
            if (this.randomCount != 0)
                writer.writeInt32(2, this.randomCount);
            if (this.poolJson.length)
                writer.writeString(3, this.poolJson);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemSetting {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemSetting();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Item.deserialize(reader), Item));
                        break;
                    case 2:
                        message.randomCount = reader.readInt32();
                        break;
                    case 3:
                        message.poolJson = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ItemSetting {
            return ItemSetting.deserialize(bytes);
        }
    }
    export class GameSetting extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rname?: string;
            gametype?: string;
            map?: number;
            isTeam?: boolean;
            playerlist?: ProtoPlayer[];
            items?: ItemSetting;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("gametype" in data && data.gametype != undefined) {
                    this.gametype = data.gametype;
                }
                if ("map" in data && data.map != undefined) {
                    this.map = data.map;
                }
                if ("isTeam" in data && data.isTeam != undefined) {
                    this.isTeam = data.isTeam;
                }
                if ("playerlist" in data && data.playerlist != undefined) {
                    this.playerlist = data.playerlist;
                }
                if ("items" in data && data.items != undefined) {
                    this.items = data.items;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get gametype() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set gametype(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get map() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set map(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get isTeam() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isTeam(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get playerlist() {
            return pb_1.Message.getRepeatedWrapperField(this, ProtoPlayer, 5) as ProtoPlayer[];
        }
        set playerlist(value: ProtoPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get items() {
            return pb_1.Message.getWrapperField(this, ItemSetting, 6) as ItemSetting;
        }
        set items(value: ItemSetting) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_items() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            rname?: string;
            gametype?: string;
            map?: number;
            isTeam?: boolean;
            playerlist?: ReturnType<typeof ProtoPlayer.prototype.toObject>[];
            items?: ReturnType<typeof ItemSetting.prototype.toObject>;
        }): GameSetting {
            const message = new GameSetting({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.gametype != null) {
                message.gametype = data.gametype;
            }
            if (data.map != null) {
                message.map = data.map;
            }
            if (data.isTeam != null) {
                message.isTeam = data.isTeam;
            }
            if (data.playerlist != null) {
                message.playerlist = data.playerlist.map(item => ProtoPlayer.fromObject(item));
            }
            if (data.items != null) {
                message.items = ItemSetting.fromObject(data.items);
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                gametype?: string;
                map?: number;
                isTeam?: boolean;
                playerlist?: ReturnType<typeof ProtoPlayer.prototype.toObject>[];
                items?: ReturnType<typeof ItemSetting.prototype.toObject>;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.gametype != null) {
                data.gametype = this.gametype;
            }
            if (this.map != null) {
                data.map = this.map;
            }
            if (this.isTeam != null) {
                data.isTeam = this.isTeam;
            }
            if (this.playerlist != null) {
                data.playerlist = this.playerlist.map((item: ProtoPlayer) => item.toObject());
            }
            if (this.items != null) {
                data.items = this.items.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.gametype.length)
                writer.writeString(2, this.gametype);
            if (this.map != 0)
                writer.writeInt32(3, this.map);
            if (this.isTeam != false)
                writer.writeBool(4, this.isTeam);
            if (this.playerlist.length)
                writer.writeRepeatedMessage(5, this.playerlist, (item: ProtoPlayer) => item.serialize(writer));
            if (this.has_items)
                writer.writeMessage(6, this.items, () => this.items.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameSetting {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameSetting();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.gametype = reader.readString();
                        break;
                    case 3:
                        message.map = reader.readInt32();
                        break;
                    case 4:
                        message.isTeam = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.playerlist, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ProtoPlayer.deserialize(reader), ProtoPlayer));
                        break;
                    case 6:
                        reader.readMessage(message.items, () => message.items = ItemSetting.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameSetting {
            return GameSetting.deserialize(bytes);
        }
    }
    export class GameSettingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rname?: string;
            turn?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("turn" in data && data.turn != undefined) {
                    this.turn = data.turn;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get turn() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set turn(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            rname?: string;
            turn?: number;
        }): GameSettingRequest {
            const message = new GameSettingRequest({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.turn != null) {
                message.turn = data.turn;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                turn?: number;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.turn != null) {
                data.turn = this.turn;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.turn != 0)
                writer.writeInt32(2, this.turn);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameSettingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameSettingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.turn = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameSettingRequest {
            return GameSettingRequest.deserialize(bytes);
        }
    }
    export class GameSettingReponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jsonPayload?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jsonPayload" in data && data.jsonPayload != undefined) {
                    this.jsonPayload = data.jsonPayload;
                }
            }
        }
        get jsonPayload() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set jsonPayload(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            jsonPayload?: string;
        }): GameSettingReponse {
            const message = new GameSettingReponse({});
            if (data.jsonPayload != null) {
                message.jsonPayload = data.jsonPayload;
            }
            return message;
        }
        toObject() {
            const data: {
                jsonPayload?: string;
            } = {};
            if (this.jsonPayload != null) {
                data.jsonPayload = this.jsonPayload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.jsonPayload.length)
                writer.writeString(1, this.jsonPayload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameSettingReponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameSettingReponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jsonPayload = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameSettingReponse {
            return GameSettingReponse.deserialize(bytes);
        }
    }
    export class UserPressDice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rname?: string;
            invoker?: number;
            target?: number;
            oddeven?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("invoker" in data && data.invoker != undefined) {
                    this.invoker = data.invoker;
                }
                if ("target" in data && data.target != undefined) {
                    this.target = data.target;
                }
                if ("oddeven" in data && data.oddeven != undefined) {
                    this.oddeven = data.oddeven;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get invoker() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invoker(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get target() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set target(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get oddeven() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set oddeven(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            rname?: string;
            invoker?: number;
            target?: number;
            oddeven?: number;
        }): UserPressDice {
            const message = new UserPressDice({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.invoker != null) {
                message.invoker = data.invoker;
            }
            if (data.target != null) {
                message.target = data.target;
            }
            if (data.oddeven != null) {
                message.oddeven = data.oddeven;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                invoker?: number;
                target?: number;
                oddeven?: number;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.invoker != null) {
                data.invoker = this.invoker;
            }
            if (this.target != null) {
                data.target = this.target;
            }
            if (this.oddeven != null) {
                data.oddeven = this.oddeven;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(4, this.rname);
            if (this.invoker != 0)
                writer.writeInt32(1, this.invoker);
            if (this.target != 0)
                writer.writeInt32(2, this.target);
            if (this.oddeven != 0)
                writer.writeInt32(3, this.oddeven);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserPressDice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserPressDice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        message.rname = reader.readString();
                        break;
                    case 1:
                        message.invoker = reader.readInt32();
                        break;
                    case 2:
                        message.target = reader.readInt32();
                        break;
                    case 3:
                        message.oddeven = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserPressDice {
            return UserPressDice.deserialize(bytes);
        }
    }
    export class BoolUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invoker?: number;
            result?: boolean;
            rname?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invoker" in data && data.invoker != undefined) {
                    this.invoker = data.invoker;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
            }
        }
        get invoker() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invoker(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set result(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            invoker?: number;
            result?: boolean;
            rname?: string;
        }): BoolUserResponse {
            const message = new BoolUserResponse({});
            if (data.invoker != null) {
                message.invoker = data.invoker;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.rname != null) {
                message.rname = data.rname;
            }
            return message;
        }
        toObject() {
            const data: {
                invoker?: number;
                result?: boolean;
                rname?: string;
            } = {};
            if (this.invoker != null) {
                data.invoker = this.invoker;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.rname != null) {
                data.rname = this.rname;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invoker != 0)
                writer.writeInt32(1, this.invoker);
            if (this.result != false)
                writer.writeBool(2, this.result);
            if (this.rname.length)
                writer.writeString(3, this.rname);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoolUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoolUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invoker = reader.readInt32();
                        break;
                    case 2:
                        message.result = reader.readBool();
                        break;
                    case 3:
                        message.rname = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoolUserResponse {
            return BoolUserResponse.deserialize(bytes);
        }
    }
    export class UserSelectBuild extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invoker?: number;
            builds?: number[];
            rname?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invoker" in data && data.invoker != undefined) {
                    this.invoker = data.invoker;
                }
                if ("builds" in data && data.builds != undefined) {
                    this.builds = data.builds;
                }
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
            }
        }
        get invoker() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invoker(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get builds() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set builds(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            invoker?: number;
            builds?: number[];
            rname?: string;
        }): UserSelectBuild {
            const message = new UserSelectBuild({});
            if (data.invoker != null) {
                message.invoker = data.invoker;
            }
            if (data.builds != null) {
                message.builds = data.builds;
            }
            if (data.rname != null) {
                message.rname = data.rname;
            }
            return message;
        }
        toObject() {
            const data: {
                invoker?: number;
                builds?: number[];
                rname?: string;
            } = {};
            if (this.invoker != null) {
                data.invoker = this.invoker;
            }
            if (this.builds != null) {
                data.builds = this.builds;
            }
            if (this.rname != null) {
                data.rname = this.rname;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invoker != 0)
                writer.writeInt32(1, this.invoker);
            if (this.builds.length)
                writer.writePackedInt32(2, this.builds);
            if (this.rname.length)
                writer.writeString(3, this.rname);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSelectBuild {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSelectBuild();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invoker = reader.readInt32();
                        break;
                    case 2:
                        message.builds = reader.readPackedInt32();
                        break;
                    case 3:
                        message.rname = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserSelectBuild {
            return UserSelectBuild.deserialize(bytes);
        }
    }
    export class UserSelectTile extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invoker?: number;
            result?: boolean;
            pos?: number;
            source?: string;
            rname?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invoker" in data && data.invoker != undefined) {
                    this.invoker = data.invoker;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("pos" in data && data.pos != undefined) {
                    this.pos = data.pos;
                }
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
            }
        }
        get invoker() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invoker(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set result(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get pos() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set pos(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            invoker?: number;
            result?: boolean;
            pos?: number;
            source?: string;
            rname?: string;
        }): UserSelectTile {
            const message = new UserSelectTile({});
            if (data.invoker != null) {
                message.invoker = data.invoker;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.pos != null) {
                message.pos = data.pos;
            }
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.rname != null) {
                message.rname = data.rname;
            }
            return message;
        }
        toObject() {
            const data: {
                invoker?: number;
                result?: boolean;
                pos?: number;
                source?: string;
                rname?: string;
            } = {};
            if (this.invoker != null) {
                data.invoker = this.invoker;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.pos != null) {
                data.pos = this.pos;
            }
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.rname != null) {
                data.rname = this.rname;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invoker != 0)
                writer.writeInt32(1, this.invoker);
            if (this.result != false)
                writer.writeBool(2, this.result);
            if (this.pos != 0)
                writer.writeInt32(3, this.pos);
            if (this.source.length)
                writer.writeString(4, this.source);
            if (this.rname.length)
                writer.writeString(5, this.rname);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSelectTile {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSelectTile();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invoker = reader.readInt32();
                        break;
                    case 2:
                        message.result = reader.readBool();
                        break;
                    case 3:
                        message.pos = reader.readInt32();
                        break;
                    case 4:
                        message.source = reader.readString();
                        break;
                    case 5:
                        message.rname = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserSelectTile {
            return UserSelectTile.deserialize(bytes);
        }
    }
    export class UserConfirmCardUse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invoker?: number;
            result?: boolean;
            cardname?: string;
            rname?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invoker" in data && data.invoker != undefined) {
                    this.invoker = data.invoker;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("cardname" in data && data.cardname != undefined) {
                    this.cardname = data.cardname;
                }
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
            }
        }
        get invoker() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set invoker(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set result(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get cardname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set cardname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            invoker?: number;
            result?: boolean;
            cardname?: string;
            rname?: string;
        }): UserConfirmCardUse {
            const message = new UserConfirmCardUse({});
            if (data.invoker != null) {
                message.invoker = data.invoker;
            }
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.cardname != null) {
                message.cardname = data.cardname;
            }
            if (data.rname != null) {
                message.rname = data.rname;
            }
            return message;
        }
        toObject() {
            const data: {
                invoker?: number;
                result?: boolean;
                cardname?: string;
                rname?: string;
            } = {};
            if (this.invoker != null) {
                data.invoker = this.invoker;
            }
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.cardname != null) {
                data.cardname = this.cardname;
            }
            if (this.rname != null) {
                data.rname = this.rname;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invoker != 0)
                writer.writeInt32(1, this.invoker);
            if (this.result != false)
                writer.writeBool(2, this.result);
            if (this.cardname.length)
                writer.writeString(3, this.cardname);
            if (this.rname.length)
                writer.writeString(4, this.rname);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserConfirmCardUse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserConfirmCardUse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invoker = reader.readInt32();
                        break;
                    case 2:
                        message.result = reader.readBool();
                        break;
                    case 3:
                        message.cardname = reader.readString();
                        break;
                    case 4:
                        message.rname = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserConfirmCardUse {
            return UserConfirmCardUse.deserialize(bytes);
        }
    }
    export class Int extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            val?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("val" in data && data.val != undefined) {
                    this.val = data.val;
                }
            }
        }
        get val() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set val(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            val?: number;
        }): Int {
            const message = new Int({});
            if (data.val != null) {
                message.val = data.val;
            }
            return message;
        }
        toObject() {
            const data: {
                val?: number;
            } = {};
            if (this.val != null) {
                data.val = this.val;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.val != 0)
                writer.writeInt32(1, this.val);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Int {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Int();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.val = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Int {
            return Int.deserialize(bytes);
        }
    }
    export class Void extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Void {
            const message = new Void({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Void {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Void();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Void {
            return Void.deserialize(bytes);
        }
    }
    export class Bool extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            val?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("val" in data && data.val != undefined) {
                    this.val = data.val;
                }
            }
        }
        get val() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set val(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            val?: boolean;
        }): Bool {
            const message = new Bool({});
            if (data.val != null) {
                message.val = data.val;
            }
            return message;
        }
        toObject() {
            const data: {
                val?: boolean;
            } = {};
            if (this.val != null) {
                data.val = this.val;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.val != false)
                writer.writeBool(1, this.val);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Bool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.val = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Bool {
            return Bool.deserialize(bytes);
        }
    }
    export class String extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            val?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("val" in data && data.val != undefined) {
                    this.val = data.val;
                }
            }
        }
        get val() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set val(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            val?: string;
        }): String {
            const message = new String({});
            if (data.val != null) {
                message.val = data.val;
            }
            return message;
        }
        toObject() {
            const data: {
                val?: string;
            } = {};
            if (this.val != null) {
                data.val = this.val;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.val.length)
                writer.writeString(1, this.val);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): String {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new String();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.val = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): String {
            return String.deserialize(bytes);
        }
    }
    export class GameEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            rname?: string;
            player?: number;
            jsonObj?: string;
            type?: string;
        } & (({
            isGameOver?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("player" in data && data.player != undefined) {
                    this.player = data.player;
                }
                if ("jsonObj" in data && data.jsonObj != undefined) {
                    this.jsonObj = data.jsonObj;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("isGameOver" in data && data.isGameOver != undefined) {
                    this.isGameOver = data.isGameOver;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get player() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set player(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get jsonObj() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set jsonObj(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get isGameOver() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set isGameOver(value: boolean) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_isGameOver() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _isGameOver() {
            const cases: {
                [index: number]: "none" | "isGameOver";
            } = {
                0: "none",
                5: "isGameOver"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            rname?: string;
            player?: number;
            jsonObj?: string;
            type?: string;
            isGameOver?: boolean;
        }): GameEvent {
            const message = new GameEvent({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.player != null) {
                message.player = data.player;
            }
            if (data.jsonObj != null) {
                message.jsonObj = data.jsonObj;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.isGameOver != null) {
                message.isGameOver = data.isGameOver;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                player?: number;
                jsonObj?: string;
                type?: string;
                isGameOver?: boolean;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.player != null) {
                data.player = this.player;
            }
            if (this.jsonObj != null) {
                data.jsonObj = this.jsonObj;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.isGameOver != null) {
                data.isGameOver = this.isGameOver;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.player != 0)
                writer.writeInt32(2, this.player);
            if (this.jsonObj.length)
                writer.writeString(3, this.jsonObj);
            if (this.type.length)
                writer.writeString(4, this.type);
            if (this.has_isGameOver)
                writer.writeBool(5, this.isGameOver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.player = reader.readInt32();
                        break;
                    case 3:
                        message.jsonObj = reader.readString();
                        break;
                    case 4:
                        message.type = reader.readString();
                        break;
                    case 5:
                        message.isGameOver = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameEvent {
            return GameEvent.deserialize(bytes);
        }
    }
    export class SimulationEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            rname?: string;
            type?: number;
            jsonObj?: string;
        } & (({
            isGameOver?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("jsonObj" in data && data.jsonObj != undefined) {
                    this.jsonObj = data.jsonObj;
                }
                if ("isGameOver" in data && data.isGameOver != undefined) {
                    this.isGameOver = data.isGameOver;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get jsonObj() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set jsonObj(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get isGameOver() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isGameOver(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_isGameOver() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _isGameOver() {
            const cases: {
                [index: number]: "none" | "isGameOver";
            } = {
                0: "none",
                4: "isGameOver"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            rname?: string;
            type?: number;
            jsonObj?: string;
            isGameOver?: boolean;
        }): SimulationEvent {
            const message = new SimulationEvent({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.jsonObj != null) {
                message.jsonObj = data.jsonObj;
            }
            if (data.isGameOver != null) {
                message.isGameOver = data.isGameOver;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                type?: number;
                jsonObj?: string;
                isGameOver?: boolean;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.jsonObj != null) {
                data.jsonObj = this.jsonObj;
            }
            if (this.isGameOver != null) {
                data.isGameOver = this.isGameOver;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.type != 0)
                writer.writeInt32(2, this.type);
            if (this.jsonObj.length)
                writer.writeString(3, this.jsonObj);
            if (this.has_isGameOver)
                writer.writeBool(4, this.isGameOver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimulationEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimulationEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readInt32();
                        break;
                    case 3:
                        message.jsonObj = reader.readString();
                        break;
                    case 4:
                        message.isGameOver = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimulationEvent {
            return SimulationEvent.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMarbleGameService {
        static definition = {
            ResetGame: {
                path: "/marblegame.MarbleGame/ResetGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            InitGame: {
                path: "/marblegame.MarbleGame/InitGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GameSetting) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GameSetting.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            RequestSetting: {
                path: "/marblegame.MarbleGame/RequestSetting",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GameSettingRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GameSettingRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GameSettingReponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GameSettingReponse.deserialize(new Uint8Array(bytes))
            },
            RequestGameStart: {
                path: "/marblegame.MarbleGame/RequestGameStart",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            PressDice: {
                path: "/marblegame.MarbleGame/PressDice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserPressDice) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserPressDice.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectBuild: {
                path: "/marblegame.MarbleGame/SelectBuild",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSelectBuild) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSelectBuild.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectBuyout: {
                path: "/marblegame.MarbleGame/SelectBuyout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BoolUserResponse) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BoolUserResponse.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectLoan: {
                path: "/marblegame.MarbleGame/SelectLoan",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BoolUserResponse) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BoolUserResponse.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectTile: {
                path: "/marblegame.MarbleGame/SelectTile",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSelectTile) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSelectTile.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            ObtainCard: {
                path: "/marblegame.MarbleGame/ObtainCard",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BoolUserResponse) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BoolUserResponse.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            ConfirmCardUse: {
                path: "/marblegame.MarbleGame/ConfirmCardUse",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserConfirmCardUse) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserConfirmCardUse.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectGodhandSpecial: {
                path: "/marblegame.MarbleGame/SelectGodhandSpecial",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BoolUserResponse) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BoolUserResponse.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectIsland: {
                path: "/marblegame.MarbleGame/SelectIsland",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BoolUserResponse) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BoolUserResponse.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            ToggleAuto: {
                path: "/marblegame.MarbleGame/ToggleAuto",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Bool) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            ListenGameEvent: {
                path: "/marblegame.MarbleGame/ListenGameEvent",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GameEvent) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GameEvent.deserialize(new Uint8Array(bytes))
            },
            ListenSimulationEvent: {
                path: "/marblegame.MarbleGame/ListenSimulationEvent",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SimulationEvent) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SimulationEvent.deserialize(new Uint8Array(bytes))
            },
            Ping: {
                path: "/marblegame.MarbleGame/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Int) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Int.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Int) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Int.deserialize(new Uint8Array(bytes))
            },
            RequestItem: {
                path: "/marblegame.MarbleGame/RequestItem",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Void) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Void.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: String) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ResetGame(call: grpc_1.ServerUnaryCall<String, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract InitGame(call: grpc_1.ServerUnaryCall<GameSetting, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract RequestSetting(call: grpc_1.ServerUnaryCall<GameSettingRequest, GameSettingReponse>, callback: grpc_1.sendUnaryData<GameSettingReponse>): void;
        abstract RequestGameStart(call: grpc_1.ServerUnaryCall<String, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract PressDice(call: grpc_1.ServerUnaryCall<UserPressDice, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectBuild(call: grpc_1.ServerUnaryCall<UserSelectBuild, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectBuyout(call: grpc_1.ServerUnaryCall<BoolUserResponse, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectLoan(call: grpc_1.ServerUnaryCall<BoolUserResponse, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectTile(call: grpc_1.ServerUnaryCall<UserSelectTile, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract ObtainCard(call: grpc_1.ServerUnaryCall<BoolUserResponse, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract ConfirmCardUse(call: grpc_1.ServerUnaryCall<UserConfirmCardUse, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectGodhandSpecial(call: grpc_1.ServerUnaryCall<BoolUserResponse, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectIsland(call: grpc_1.ServerUnaryCall<BoolUserResponse, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract ToggleAuto(call: grpc_1.ServerUnaryCall<Bool, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract ListenGameEvent(call: grpc_1.ServerWritableStream<String, GameEvent>): void;
        abstract ListenSimulationEvent(call: grpc_1.ServerWritableStream<String, SimulationEvent>): void;
        abstract Ping(call: grpc_1.ServerUnaryCall<Int, Int>, callback: grpc_1.sendUnaryData<Int>): void;
        abstract RequestItem(call: grpc_1.ServerUnaryCall<Void, String>, callback: grpc_1.sendUnaryData<String>): void;
    }
    export class MarbleGameClient extends grpc_1.makeGenericClientConstructor(UnimplementedMarbleGameService.definition, "MarbleGame", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ResetGame: GrpcUnaryServiceInterface<String, Bool> = (message: String, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.ResetGame(message, metadata, options, callback);
        };
        InitGame: GrpcUnaryServiceInterface<GameSetting, Bool> = (message: GameSetting, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.InitGame(message, metadata, options, callback);
        };
        RequestSetting: GrpcUnaryServiceInterface<GameSettingRequest, GameSettingReponse> = (message: GameSettingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GameSettingReponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GameSettingReponse>, callback?: grpc_1.requestCallback<GameSettingReponse>): grpc_1.ClientUnaryCall => {
            return super.RequestSetting(message, metadata, options, callback);
        };
        RequestGameStart: GrpcUnaryServiceInterface<String, Bool> = (message: String, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.RequestGameStart(message, metadata, options, callback);
        };
        PressDice: GrpcUnaryServiceInterface<UserPressDice, Bool> = (message: UserPressDice, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.PressDice(message, metadata, options, callback);
        };
        SelectBuild: GrpcUnaryServiceInterface<UserSelectBuild, Bool> = (message: UserSelectBuild, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectBuild(message, metadata, options, callback);
        };
        SelectBuyout: GrpcUnaryServiceInterface<BoolUserResponse, Bool> = (message: BoolUserResponse, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectBuyout(message, metadata, options, callback);
        };
        SelectLoan: GrpcUnaryServiceInterface<BoolUserResponse, Bool> = (message: BoolUserResponse, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectLoan(message, metadata, options, callback);
        };
        SelectTile: GrpcUnaryServiceInterface<UserSelectTile, Bool> = (message: UserSelectTile, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectTile(message, metadata, options, callback);
        };
        ObtainCard: GrpcUnaryServiceInterface<BoolUserResponse, Bool> = (message: BoolUserResponse, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.ObtainCard(message, metadata, options, callback);
        };
        ConfirmCardUse: GrpcUnaryServiceInterface<UserConfirmCardUse, Bool> = (message: UserConfirmCardUse, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.ConfirmCardUse(message, metadata, options, callback);
        };
        SelectGodhandSpecial: GrpcUnaryServiceInterface<BoolUserResponse, Bool> = (message: BoolUserResponse, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectGodhandSpecial(message, metadata, options, callback);
        };
        SelectIsland: GrpcUnaryServiceInterface<BoolUserResponse, Bool> = (message: BoolUserResponse, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectIsland(message, metadata, options, callback);
        };
        ToggleAuto: GrpcUnaryServiceInterface<Bool, Bool> = (message: Bool, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.ToggleAuto(message, metadata, options, callback);
        };
        ListenGameEvent: GrpcStreamServiceInterface<String, GameEvent> = (message: String, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GameEvent> => {
            return super.ListenGameEvent(message, metadata, options);
        };
        ListenSimulationEvent: GrpcStreamServiceInterface<String, SimulationEvent> = (message: String, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<SimulationEvent> => {
            return super.ListenSimulationEvent(message, metadata, options);
        };
        Ping: GrpcUnaryServiceInterface<Int, Int> = (message: Int, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Int>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Int>, callback?: grpc_1.requestCallback<Int>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        RequestItem: GrpcUnaryServiceInterface<Void, String> = (message: Void, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<String>, options?: grpc_1.CallOptions | grpc_1.requestCallback<String>, callback?: grpc_1.requestCallback<String>): grpc_1.ClientUnaryCall => {
            return super.RequestItem(message, metadata, options, callback);
        };
    }
}
