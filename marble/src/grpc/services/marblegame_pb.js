// source: src/grpc/proto/marblegame.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.marblegame.Bool', null, global);
goog.exportSymbol('proto.marblegame.BoolUserResponse', null, global);
goog.exportSymbol('proto.marblegame.GameEvent', null, global);
goog.exportSymbol('proto.marblegame.GameSetting', null, global);
goog.exportSymbol('proto.marblegame.GameSettingReponse', null, global);
goog.exportSymbol('proto.marblegame.GameSettingRequest', null, global);
goog.exportSymbol('proto.marblegame.Int', null, global);
goog.exportSymbol('proto.marblegame.Item', null, global);
goog.exportSymbol('proto.marblegame.ItemSetting', null, global);
goog.exportSymbol('proto.marblegame.ProtoPlayer', null, global);
goog.exportSymbol('proto.marblegame.SimulationEvent', null, global);
goog.exportSymbol('proto.marblegame.String', null, global);
goog.exportSymbol('proto.marblegame.UserConfirmCardUse', null, global);
goog.exportSymbol('proto.marblegame.UserPressDice', null, global);
goog.exportSymbol('proto.marblegame.UserSelectBuild', null, global);
goog.exportSymbol('proto.marblegame.UserSelectTile', null, global);
goog.exportSymbol('proto.marblegame.Void', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.ProtoPlayer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.ProtoPlayer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.ProtoPlayer.displayName = 'proto.marblegame.ProtoPlayer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.Item.displayName = 'proto.marblegame.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.ItemSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.marblegame.ItemSetting.repeatedFields_, null);
};
goog.inherits(proto.marblegame.ItemSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.ItemSetting.displayName = 'proto.marblegame.ItemSetting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.GameSetting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.marblegame.GameSetting.repeatedFields_, null);
};
goog.inherits(proto.marblegame.GameSetting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.GameSetting.displayName = 'proto.marblegame.GameSetting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.GameSettingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.GameSettingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.GameSettingRequest.displayName = 'proto.marblegame.GameSettingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.GameSettingReponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.GameSettingReponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.GameSettingReponse.displayName = 'proto.marblegame.GameSettingReponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.UserPressDice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.UserPressDice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.UserPressDice.displayName = 'proto.marblegame.UserPressDice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.BoolUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.BoolUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.BoolUserResponse.displayName = 'proto.marblegame.BoolUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.UserSelectBuild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.marblegame.UserSelectBuild.repeatedFields_, null);
};
goog.inherits(proto.marblegame.UserSelectBuild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.UserSelectBuild.displayName = 'proto.marblegame.UserSelectBuild';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.UserSelectTile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.UserSelectTile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.UserSelectTile.displayName = 'proto.marblegame.UserSelectTile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.UserConfirmCardUse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.UserConfirmCardUse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.UserConfirmCardUse.displayName = 'proto.marblegame.UserConfirmCardUse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.Int = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.Int, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.Int.displayName = 'proto.marblegame.Int';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.Void.displayName = 'proto.marblegame.Void';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.Bool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.Bool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.Bool.displayName = 'proto.marblegame.Bool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.String = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.String, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.String.displayName = 'proto.marblegame.String';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.GameEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.GameEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.GameEvent.displayName = 'proto.marblegame.GameEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.marblegame.SimulationEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.marblegame.SimulationEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.marblegame.SimulationEvent.displayName = 'proto.marblegame.SimulationEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.ProtoPlayer.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.ProtoPlayer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.ProtoPlayer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.ProtoPlayer.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    team: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    champ: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ready: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    userclass: jspb.Message.getFieldWithDefault(msg, 6, 0),
    data: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.ProtoPlayer}
 */
proto.marblegame.ProtoPlayer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.ProtoPlayer;
  return proto.marblegame.ProtoPlayer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.ProtoPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.ProtoPlayer}
 */
proto.marblegame.ProtoPlayer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTeam(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChamp(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReady(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserclass(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.ProtoPlayer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.ProtoPlayer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.ProtoPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.ProtoPlayer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTeam();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getChamp();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getReady();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUserclass();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.marblegame.ProtoPlayer.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.ProtoPlayer} returns this
 */
proto.marblegame.ProtoPlayer.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.marblegame.ProtoPlayer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.ProtoPlayer} returns this
 */
proto.marblegame.ProtoPlayer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool team = 3;
 * @return {boolean}
 */
proto.marblegame.ProtoPlayer.prototype.getTeam = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.ProtoPlayer} returns this
 */
proto.marblegame.ProtoPlayer.prototype.setTeam = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 champ = 4;
 * @return {number}
 */
proto.marblegame.ProtoPlayer.prototype.getChamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.ProtoPlayer} returns this
 */
proto.marblegame.ProtoPlayer.prototype.setChamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool ready = 5;
 * @return {boolean}
 */
proto.marblegame.ProtoPlayer.prototype.getReady = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.ProtoPlayer} returns this
 */
proto.marblegame.ProtoPlayer.prototype.setReady = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional int32 userClass = 6;
 * @return {number}
 */
proto.marblegame.ProtoPlayer.prototype.getUserclass = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.ProtoPlayer} returns this
 */
proto.marblegame.ProtoPlayer.prototype.setUserclass = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string data = 7;
 * @return {string}
 */
proto.marblegame.ProtoPlayer.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.ProtoPlayer} returns this
 */
proto.marblegame.ProtoPlayer.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    locked: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    selected: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.Item}
 */
proto.marblegame.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.Item;
  return proto.marblegame.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.Item}
 */
proto.marblegame.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocked(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLocked();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getSelected();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.marblegame.Item.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.Item} returns this
 */
proto.marblegame.Item.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool locked = 2;
 * @return {boolean}
 */
proto.marblegame.Item.prototype.getLocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.Item} returns this
 */
proto.marblegame.Item.prototype.setLocked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool selected = 3;
 * @return {boolean}
 */
proto.marblegame.Item.prototype.getSelected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.Item} returns this
 */
proto.marblegame.Item.prototype.setSelected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.marblegame.ItemSetting.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.ItemSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.ItemSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.ItemSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.ItemSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.marblegame.Item.toObject, includeInstance),
    randomcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pooljson: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.ItemSetting}
 */
proto.marblegame.ItemSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.ItemSetting;
  return proto.marblegame.ItemSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.ItemSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.ItemSetting}
 */
proto.marblegame.ItemSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.marblegame.Item;
      reader.readMessage(value,proto.marblegame.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRandomcount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPooljson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.ItemSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.ItemSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.ItemSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.ItemSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.marblegame.Item.serializeBinaryToWriter
    );
  }
  f = message.getRandomcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPooljson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated Item items = 1;
 * @return {!Array<!proto.marblegame.Item>}
 */
proto.marblegame.ItemSetting.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.marblegame.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.marblegame.Item, 1));
};


/**
 * @param {!Array<!proto.marblegame.Item>} value
 * @return {!proto.marblegame.ItemSetting} returns this
*/
proto.marblegame.ItemSetting.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.marblegame.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.marblegame.Item}
 */
proto.marblegame.ItemSetting.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.marblegame.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.marblegame.ItemSetting} returns this
 */
proto.marblegame.ItemSetting.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional int32 randomCount = 2;
 * @return {number}
 */
proto.marblegame.ItemSetting.prototype.getRandomcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.ItemSetting} returns this
 */
proto.marblegame.ItemSetting.prototype.setRandomcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string poolJson = 3;
 * @return {string}
 */
proto.marblegame.ItemSetting.prototype.getPooljson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.ItemSetting} returns this
 */
proto.marblegame.ItemSetting.prototype.setPooljson = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.marblegame.GameSetting.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.GameSetting.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.GameSetting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.GameSetting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.GameSetting.toObject = function(includeInstance, msg) {
  var f, obj = {
    rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gametype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    map: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isteam: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    playerlistList: jspb.Message.toObjectList(msg.getPlayerlistList(),
    proto.marblegame.ProtoPlayer.toObject, includeInstance),
    items: (f = msg.getItems()) && proto.marblegame.ItemSetting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.GameSetting}
 */
proto.marblegame.GameSetting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.GameSetting;
  return proto.marblegame.GameSetting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.GameSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.GameSetting}
 */
proto.marblegame.GameSetting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGametype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMap(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsteam(value);
      break;
    case 5:
      var value = new proto.marblegame.ProtoPlayer;
      reader.readMessage(value,proto.marblegame.ProtoPlayer.deserializeBinaryFromReader);
      msg.addPlayerlist(value);
      break;
    case 6:
      var value = new proto.marblegame.ItemSetting;
      reader.readMessage(value,proto.marblegame.ItemSetting.deserializeBinaryFromReader);
      msg.setItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.GameSetting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.GameSetting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.GameSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.GameSetting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGametype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMap();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsteam();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getPlayerlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.marblegame.ProtoPlayer.serializeBinaryToWriter
    );
  }
  f = message.getItems();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.marblegame.ItemSetting.serializeBinaryToWriter
    );
  }
};


/**
 * optional string rname = 1;
 * @return {string}
 */
proto.marblegame.GameSetting.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.GameSetting} returns this
 */
proto.marblegame.GameSetting.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gametype = 2;
 * @return {string}
 */
proto.marblegame.GameSetting.prototype.getGametype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.GameSetting} returns this
 */
proto.marblegame.GameSetting.prototype.setGametype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 map = 3;
 * @return {number}
 */
proto.marblegame.GameSetting.prototype.getMap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.GameSetting} returns this
 */
proto.marblegame.GameSetting.prototype.setMap = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool isTeam = 4;
 * @return {boolean}
 */
proto.marblegame.GameSetting.prototype.getIsteam = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.GameSetting} returns this
 */
proto.marblegame.GameSetting.prototype.setIsteam = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated ProtoPlayer playerlist = 5;
 * @return {!Array<!proto.marblegame.ProtoPlayer>}
 */
proto.marblegame.GameSetting.prototype.getPlayerlistList = function() {
  return /** @type{!Array<!proto.marblegame.ProtoPlayer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.marblegame.ProtoPlayer, 5));
};


/**
 * @param {!Array<!proto.marblegame.ProtoPlayer>} value
 * @return {!proto.marblegame.GameSetting} returns this
*/
proto.marblegame.GameSetting.prototype.setPlayerlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.marblegame.ProtoPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.marblegame.ProtoPlayer}
 */
proto.marblegame.GameSetting.prototype.addPlayerlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.marblegame.ProtoPlayer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.marblegame.GameSetting} returns this
 */
proto.marblegame.GameSetting.prototype.clearPlayerlistList = function() {
  return this.setPlayerlistList([]);
};


/**
 * optional ItemSetting items = 6;
 * @return {?proto.marblegame.ItemSetting}
 */
proto.marblegame.GameSetting.prototype.getItems = function() {
  return /** @type{?proto.marblegame.ItemSetting} */ (
    jspb.Message.getWrapperField(this, proto.marblegame.ItemSetting, 6));
};


/**
 * @param {?proto.marblegame.ItemSetting|undefined} value
 * @return {!proto.marblegame.GameSetting} returns this
*/
proto.marblegame.GameSetting.prototype.setItems = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.marblegame.GameSetting} returns this
 */
proto.marblegame.GameSetting.prototype.clearItems = function() {
  return this.setItems(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.marblegame.GameSetting.prototype.hasItems = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.GameSettingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.GameSettingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.GameSettingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.GameSettingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    turn: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.GameSettingRequest}
 */
proto.marblegame.GameSettingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.GameSettingRequest;
  return proto.marblegame.GameSettingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.GameSettingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.GameSettingRequest}
 */
proto.marblegame.GameSettingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTurn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.GameSettingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.GameSettingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.GameSettingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.GameSettingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTurn();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string rname = 1;
 * @return {string}
 */
proto.marblegame.GameSettingRequest.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.GameSettingRequest} returns this
 */
proto.marblegame.GameSettingRequest.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 turn = 2;
 * @return {number}
 */
proto.marblegame.GameSettingRequest.prototype.getTurn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.GameSettingRequest} returns this
 */
proto.marblegame.GameSettingRequest.prototype.setTurn = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.GameSettingReponse.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.GameSettingReponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.GameSettingReponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.GameSettingReponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsonpayload: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.GameSettingReponse}
 */
proto.marblegame.GameSettingReponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.GameSettingReponse;
  return proto.marblegame.GameSettingReponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.GameSettingReponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.GameSettingReponse}
 */
proto.marblegame.GameSettingReponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonpayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.GameSettingReponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.GameSettingReponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.GameSettingReponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.GameSettingReponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJsonpayload();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string jsonPayload = 1;
 * @return {string}
 */
proto.marblegame.GameSettingReponse.prototype.getJsonpayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.GameSettingReponse} returns this
 */
proto.marblegame.GameSettingReponse.prototype.setJsonpayload = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.UserPressDice.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.UserPressDice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.UserPressDice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.UserPressDice.toObject = function(includeInstance, msg) {
  var f, obj = {
    rname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    invoker: jspb.Message.getFieldWithDefault(msg, 1, 0),
    target: jspb.Message.getFieldWithDefault(msg, 2, 0),
    oddeven: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.UserPressDice}
 */
proto.marblegame.UserPressDice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.UserPressDice;
  return proto.marblegame.UserPressDice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.UserPressDice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.UserPressDice}
 */
proto.marblegame.UserPressDice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvoker(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTarget(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOddeven(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.UserPressDice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.UserPressDice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.UserPressDice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.UserPressDice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInvoker();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTarget();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getOddeven();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string rname = 4;
 * @return {string}
 */
proto.marblegame.UserPressDice.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.UserPressDice} returns this
 */
proto.marblegame.UserPressDice.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 invoker = 1;
 * @return {number}
 */
proto.marblegame.UserPressDice.prototype.getInvoker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.UserPressDice} returns this
 */
proto.marblegame.UserPressDice.prototype.setInvoker = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 target = 2;
 * @return {number}
 */
proto.marblegame.UserPressDice.prototype.getTarget = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.UserPressDice} returns this
 */
proto.marblegame.UserPressDice.prototype.setTarget = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 oddeven = 3;
 * @return {number}
 */
proto.marblegame.UserPressDice.prototype.getOddeven = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.UserPressDice} returns this
 */
proto.marblegame.UserPressDice.prototype.setOddeven = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.BoolUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.BoolUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.BoolUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.BoolUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoker: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    rname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.BoolUserResponse}
 */
proto.marblegame.BoolUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.BoolUserResponse;
  return proto.marblegame.BoolUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.BoolUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.BoolUserResponse}
 */
proto.marblegame.BoolUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvoker(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.BoolUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.BoolUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.BoolUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.BoolUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoker();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 invoker = 1;
 * @return {number}
 */
proto.marblegame.BoolUserResponse.prototype.getInvoker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.BoolUserResponse} returns this
 */
proto.marblegame.BoolUserResponse.prototype.setInvoker = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool result = 2;
 * @return {boolean}
 */
proto.marblegame.BoolUserResponse.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.BoolUserResponse} returns this
 */
proto.marblegame.BoolUserResponse.prototype.setResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string rname = 3;
 * @return {string}
 */
proto.marblegame.BoolUserResponse.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.BoolUserResponse} returns this
 */
proto.marblegame.BoolUserResponse.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.marblegame.UserSelectBuild.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.UserSelectBuild.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.UserSelectBuild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.UserSelectBuild} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.UserSelectBuild.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoker: jspb.Message.getFieldWithDefault(msg, 1, 0),
    buildsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    rname: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.UserSelectBuild}
 */
proto.marblegame.UserSelectBuild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.UserSelectBuild;
  return proto.marblegame.UserSelectBuild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.UserSelectBuild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.UserSelectBuild}
 */
proto.marblegame.UserSelectBuild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvoker(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addBuilds(values[i]);
      }
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.UserSelectBuild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.UserSelectBuild.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.UserSelectBuild} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.UserSelectBuild.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoker();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBuildsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 invoker = 1;
 * @return {number}
 */
proto.marblegame.UserSelectBuild.prototype.getInvoker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.UserSelectBuild} returns this
 */
proto.marblegame.UserSelectBuild.prototype.setInvoker = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated int32 builds = 2;
 * @return {!Array<number>}
 */
proto.marblegame.UserSelectBuild.prototype.getBuildsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.marblegame.UserSelectBuild} returns this
 */
proto.marblegame.UserSelectBuild.prototype.setBuildsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.marblegame.UserSelectBuild} returns this
 */
proto.marblegame.UserSelectBuild.prototype.addBuilds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.marblegame.UserSelectBuild} returns this
 */
proto.marblegame.UserSelectBuild.prototype.clearBuildsList = function() {
  return this.setBuildsList([]);
};


/**
 * optional string rname = 3;
 * @return {string}
 */
proto.marblegame.UserSelectBuild.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.UserSelectBuild} returns this
 */
proto.marblegame.UserSelectBuild.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.UserSelectTile.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.UserSelectTile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.UserSelectTile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.UserSelectTile.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoker: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    pos: jspb.Message.getFieldWithDefault(msg, 3, 0),
    source: jspb.Message.getFieldWithDefault(msg, 4, ""),
    rname: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.UserSelectTile}
 */
proto.marblegame.UserSelectTile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.UserSelectTile;
  return proto.marblegame.UserSelectTile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.UserSelectTile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.UserSelectTile}
 */
proto.marblegame.UserSelectTile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvoker(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPos(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.UserSelectTile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.UserSelectTile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.UserSelectTile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.UserSelectTile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoker();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getPos();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 invoker = 1;
 * @return {number}
 */
proto.marblegame.UserSelectTile.prototype.getInvoker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.UserSelectTile} returns this
 */
proto.marblegame.UserSelectTile.prototype.setInvoker = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool result = 2;
 * @return {boolean}
 */
proto.marblegame.UserSelectTile.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.UserSelectTile} returns this
 */
proto.marblegame.UserSelectTile.prototype.setResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 pos = 3;
 * @return {number}
 */
proto.marblegame.UserSelectTile.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.UserSelectTile} returns this
 */
proto.marblegame.UserSelectTile.prototype.setPos = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.marblegame.UserSelectTile.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.UserSelectTile} returns this
 */
proto.marblegame.UserSelectTile.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string rname = 5;
 * @return {string}
 */
proto.marblegame.UserSelectTile.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.UserSelectTile} returns this
 */
proto.marblegame.UserSelectTile.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.UserConfirmCardUse.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.UserConfirmCardUse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.UserConfirmCardUse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.UserConfirmCardUse.toObject = function(includeInstance, msg) {
  var f, obj = {
    invoker: jspb.Message.getFieldWithDefault(msg, 1, 0),
    result: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    cardname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    rname: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.UserConfirmCardUse}
 */
proto.marblegame.UserConfirmCardUse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.UserConfirmCardUse;
  return proto.marblegame.UserConfirmCardUse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.UserConfirmCardUse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.UserConfirmCardUse}
 */
proto.marblegame.UserConfirmCardUse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvoker(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.UserConfirmCardUse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.UserConfirmCardUse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.UserConfirmCardUse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.UserConfirmCardUse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvoker();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getResult();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCardname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 invoker = 1;
 * @return {number}
 */
proto.marblegame.UserConfirmCardUse.prototype.getInvoker = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.UserConfirmCardUse} returns this
 */
proto.marblegame.UserConfirmCardUse.prototype.setInvoker = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool result = 2;
 * @return {boolean}
 */
proto.marblegame.UserConfirmCardUse.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.UserConfirmCardUse} returns this
 */
proto.marblegame.UserConfirmCardUse.prototype.setResult = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string cardname = 3;
 * @return {string}
 */
proto.marblegame.UserConfirmCardUse.prototype.getCardname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.UserConfirmCardUse} returns this
 */
proto.marblegame.UserConfirmCardUse.prototype.setCardname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string rname = 4;
 * @return {string}
 */
proto.marblegame.UserConfirmCardUse.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.UserConfirmCardUse} returns this
 */
proto.marblegame.UserConfirmCardUse.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.Int.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.Int.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.Int} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.Int.toObject = function(includeInstance, msg) {
  var f, obj = {
    val: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.Int}
 */
proto.marblegame.Int.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.Int;
  return proto.marblegame.Int.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.Int} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.Int}
 */
proto.marblegame.Int.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.Int.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.Int.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.Int} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.Int.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVal();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 val = 1;
 * @return {number}
 */
proto.marblegame.Int.prototype.getVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.Int} returns this
 */
proto.marblegame.Int.prototype.setVal = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.Void} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.Void}
 */
proto.marblegame.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.Void;
  return proto.marblegame.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.Void}
 */
proto.marblegame.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.Bool.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.Bool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.Bool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.Bool.toObject = function(includeInstance, msg) {
  var f, obj = {
    val: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.Bool}
 */
proto.marblegame.Bool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.Bool;
  return proto.marblegame.Bool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.Bool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.Bool}
 */
proto.marblegame.Bool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.Bool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.Bool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.Bool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.Bool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVal();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool val = 1;
 * @return {boolean}
 */
proto.marblegame.Bool.prototype.getVal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.Bool} returns this
 */
proto.marblegame.Bool.prototype.setVal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.String.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.String.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.String} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.String.toObject = function(includeInstance, msg) {
  var f, obj = {
    val: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.String}
 */
proto.marblegame.String.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.String;
  return proto.marblegame.String.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.String}
 */
proto.marblegame.String.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.String.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.String.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.String.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVal();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string val = 1;
 * @return {string}
 */
proto.marblegame.String.prototype.getVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.String} returns this
 */
proto.marblegame.String.prototype.setVal = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.GameEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.GameEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.GameEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.GameEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    player: jspb.Message.getFieldWithDefault(msg, 2, 0),
    jsonobj: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, ""),
    isgameover: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.GameEvent}
 */
proto.marblegame.GameEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.GameEvent;
  return proto.marblegame.GameEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.GameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.GameEvent}
 */
proto.marblegame.GameEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlayer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonobj(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgameover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.GameEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.GameEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.GameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.GameEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayer();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getJsonobj();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string rname = 1;
 * @return {string}
 */
proto.marblegame.GameEvent.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.GameEvent} returns this
 */
proto.marblegame.GameEvent.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 player = 2;
 * @return {number}
 */
proto.marblegame.GameEvent.prototype.getPlayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.GameEvent} returns this
 */
proto.marblegame.GameEvent.prototype.setPlayer = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string jsonObj = 3;
 * @return {string}
 */
proto.marblegame.GameEvent.prototype.getJsonobj = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.GameEvent} returns this
 */
proto.marblegame.GameEvent.prototype.setJsonobj = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string type = 4;
 * @return {string}
 */
proto.marblegame.GameEvent.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.GameEvent} returns this
 */
proto.marblegame.GameEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool isGameOver = 5;
 * @return {boolean}
 */
proto.marblegame.GameEvent.prototype.getIsgameover = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.GameEvent} returns this
 */
proto.marblegame.GameEvent.prototype.setIsgameover = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.marblegame.GameEvent} returns this
 */
proto.marblegame.GameEvent.prototype.clearIsgameover = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.marblegame.GameEvent.prototype.hasIsgameover = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.marblegame.SimulationEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.marblegame.SimulationEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.marblegame.SimulationEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.SimulationEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    jsonobj: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isgameover: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.marblegame.SimulationEvent}
 */
proto.marblegame.SimulationEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.marblegame.SimulationEvent;
  return proto.marblegame.SimulationEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.marblegame.SimulationEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.marblegame.SimulationEvent}
 */
proto.marblegame.SimulationEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonobj(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgameover(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.marblegame.SimulationEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.marblegame.SimulationEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.marblegame.SimulationEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.marblegame.SimulationEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getJsonobj();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string rname = 1;
 * @return {string}
 */
proto.marblegame.SimulationEvent.prototype.getRname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.SimulationEvent} returns this
 */
proto.marblegame.SimulationEvent.prototype.setRname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.marblegame.SimulationEvent.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.marblegame.SimulationEvent} returns this
 */
proto.marblegame.SimulationEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string jsonObj = 3;
 * @return {string}
 */
proto.marblegame.SimulationEvent.prototype.getJsonobj = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.marblegame.SimulationEvent} returns this
 */
proto.marblegame.SimulationEvent.prototype.setJsonobj = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool isGameOver = 4;
 * @return {boolean}
 */
proto.marblegame.SimulationEvent.prototype.getIsgameover = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.marblegame.SimulationEvent} returns this
 */
proto.marblegame.SimulationEvent.prototype.setIsgameover = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.marblegame.SimulationEvent} returns this
 */
proto.marblegame.SimulationEvent.prototype.clearIsgameover = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.marblegame.SimulationEvent.prototype.hasIsgameover = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.marblegame);
